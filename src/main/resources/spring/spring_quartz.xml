<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<context:component-scan base-package="com.cdkj.gchf">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	 <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">  
       <property name="triggers">  
           <list>
           	  <ref bean="attendanceDailyTrigger"/> 
           	  <ref bean="salaryMonthlyTrigger"/> 
           	  <ref bean="updateEmployStatusTrigger"/> 
           	  <ref bean="nextMonthSalaryTrigger"/> 
 		   </list>  
       </property>  
       <property name="autoStartup" value="true"/>  
    </bean> 
    
    
    <!-- 生成工资条 -->
	<bean id="salaryMonthlyTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail" ref="createSalaryMonthly"/>  
       <property name="cronExpression" value="0 0 0  * *  ?"/><!-- 0 0 1 * * ?  每月的第一天0点执行 -->
	</bean>
	
	<bean id="createSalaryMonthly" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">   
        <property name="targetObject" ref="salaryAOImpl"/>  
        <property name="targetMethod" value="createSalary"/>  
        <property name="concurrent" value="true"/> <!--   是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
	
	<!-- 生成考勤 -->
	<bean id="attendanceDailyTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail" ref="createAttendanceDaily"/>  
       <property name="cronExpression" value="0 0 0  * * ?"/><!-- 0 0 0 1 * ?  每天凌晨-->
	</bean> 
	<bean id="createAttendanceDaily" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">   
        <property name="targetObject" ref="attendanceAOImpl"/>  
        <property name="targetMethod" value="createAttendance"/>  
        <property name="concurrent" value="true"/> <!--   是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
	
	<!-- 员工是否请假 -->
	<bean id="updateEmployStatusTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail" ref="updateEmployStatus"/>  
       <property name="cronExpression" value="0 0 0 * * ?"/><!--每小时-->
	</bean>
	<bean id="updateEmployStatus" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">   
        <property name="targetObject" ref="employAOImpl"/>  
        <property name="targetMethod" value="updateStatus"/>  
        <property name="concurrent" value="true"/> <!--   是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
		
	<!-- 下个月预计发薪 -->
	<bean id="nextMonthSalaryTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail" ref="nextMonthSalaryReport"/>  
       <property name="cronExpression" value="0 0 0 1 * ?"/><!-- 0 0 0 1 * ? 每月第一天 -->
	</bean>
	<bean id="nextMonthSalaryReport" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">   
        <property name="targetObject" ref="reportAOImpl"/>  
        <property name="targetMethod" value="nextMonthSalary"/>  
        <property name="concurrent" value="true"/> <!--   是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程 -->
	</bean>
	
	<!-- <bean id="orderTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">  
       <property name="jobDetail" ref="doChangeOrderStatusDaily"/>  
       <property name="cronExpression" value="0 0 22 * * ?"/>每天22点执行
	</bean>
	<bean id="doChangeOrderStatusDaily" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">   
	        <property name="targetObject" ref="orderAOImpl"/>  
	        <property name="targetMethod" value="doChangeOrderStatusDaily"/>  
	        <property name="concurrent" value="true"/>   是否允许任务并发执行。当值为false时，表示必须等到前一个线程处理完毕后才再启一个新的线程  
	</bean>
 -->	
	
	
</beans>